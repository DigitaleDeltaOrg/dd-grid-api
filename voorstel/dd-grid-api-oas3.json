{
	"openapi": "3.0.2",
	"info": {
		"title": "Draft version of the DD-GRID-API, derived from the OGC API - Coverages (https://github.com/opengeospatial/ogc_api_coverages)",
		"description": "See <see href=\"https://github.com/DigitaleDeltaOrg/dd-grid-api\"> for additional information",
		"contact": {
			"name": "Digitale Delta werkgroep",
			"url": "http://www.digitaledelta.org",
			"email": "email.not.yet.available@digitaledelta.org"
		},
		"license": {
			"name": "APACHE LICENSE, VERSION 2.0",
			"url": "https://www.apache.org/licenses/LICENSE-2.0"
		},
		"version": "0.9"
	},
	"tags": [
		{
			"name": "Capabilities",
			"description": "Essential characteristics of this API including information about the data."
		},
		{
			"name": "Coverage",
			"description": "Access to data (coverage)."
		}
	],
	"paths": {
		"/": {
			"get": {
				"tags": [
					"Capabilities"
				],
				"summary": "Landing page of this API",
				"description": "The landing page provides links to the API definition, the Conformance statements and the metadata about the coverage data in this dataset.",
				"operationId": "getLandingPage",
				"parameters": [
				],
				"responses": {
					"200": {
						"description": "links to the API capabilities",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/root"
								}
							},
							"text/html": {
								"schema": {
									"type": "string"
								}
							}
						}
					}
				}
			}
		},
		"/api": {
			"get": {
				"tags": [
					"Capabilities"
				],
				"summary": "API definition",
				"description": "most likely returning the document at hand",
				"responses": {
					"200": {
						"description": "most likely returning the document at hand",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/paths/~1api"
								}
							}
						}
					},
					"default": {
						"description": "An error occured.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/exception"
								}
							}
						}
					}
				}
			}
		},
		"/coverages": {
			"get": {
				"tags": [
					"Capabilities"
				],
				"summary": "Get the coverages offered by the provider",
				"operationId": "getCoverages",
				"parameters": [
					{
						"$ref": "#/components/parameters/pageSize"
					},
					{
						"$ref": "#/components/parameters/page"
					},
					{
						"$ref": "#/components/parameters/boundingBox"
					},
					{
						"$ref": "#/components/parameters/time"
					},
					{
						"name": "quantityId",
						"in": "query",
						"description": "Select only the coverages that contain the quantity identified by \"quantityId\"\n",
						"required": false,
						"style": "form",
						"explode": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "quantityName",
						"in": "query",
						"description": "Select only the coverages that contain the quantity identified by \"quantityName\"\n",
						"required": false,
						"style": "form",
						"explode": false,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Metadata about the coverages exposed by the system.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/coveragelist"
								}
							}
						}
					},
					"default": {
						"description": "An error occured.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error"
								}
							}
						}
					}
				}
			}
		},
		"/coverages/{coverageId}": {
			"get": {
				"tags": [
					"Capabilities"
				],
				"summary": "All metadata the coverage identified by {coverageId}.",
				"description": "All metadata the coverage identified by {coverageId}.",
				"operationId": "getCoverage",
				"parameters": [
					{
						"$ref": "#/components/parameters/coverageId"
					}
				],
				"responses": {
					"200": {
						"description": "Metadata of the coverage identified by {coverageId}.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/coverage"
								}
							},
							"text/html": {
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"default": {
						"description": "An error occured.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/exception"
								}
							},
							"text/html": {
								"schema": {
									"type": "string"
								}
							}
						}
					}
				}
			}
		},
		"/coverages/{coverageId}/data": {
			"get": {
				"tags": [
					"Coverage"
				],
				"summary": "retrieve a coverages rangeset, or subset of that rangeset",
				"operationId": "getCoverageData",
				"parameters": [
					{
						"$ref": "#/components/parameters/coverageId"
					},
					{
						"$ref": "#/components/parameters/boundingBox"
					},
					{
						"$ref": "#/components/parameters/quantityIds"
					},
					{
						"$ref": "#/components/parameters/quantityNames"
					},
					{
						"$ref": "#/components/parameters/outputCrs"
					}
				],
				"responses": {
					"200": {
						"description": "(A subset of) The actual coverage data.",
						"content": {
							"application/octet-stream": {
								"schema": {
									"$ref": "http://cfconventions.org/Data/cf-conventions/cf-conventions-1.8/cf-conventions.html"
								}
							}
						}
					},
					"default": {
						"description": "An error occured.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/exception"
								}
							},
							"text/html": {
								"schema": {
									"type": "string"
								}
							}
						}
					}
				}
			}
		},
		"/dataformats": {
			"get": {
				"tags": [
					"Coverage"
				],
				"summary": "Get the list of supported output data formats",
				"operationId": "getDataFormats",
				"parameters": [
				],
				"responses": {
					"200": {
						"description": "List of supported output data formats.",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"minItems": 1,
									"items": {
										"type": "string"
									}
								}
							}
						}
					},
					"default": {
						"description": "An error occured.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/exception"
								}
							},
							"text/html": {
								"schema": {
									"type": "string"
								}
							}
						}
					}
				}
			}
		},
		"/outputCrss": {
			"get": {
				"tags": [
					"Coverage"
				],
				"summary": "Get the list of the supported output coordinate reference systems / projections",
				"operationId": "getTargetProjections",
				"parameters": [
				],
				"responses": {
					"200": {
						"description": "List of supported output coordinate reference systems / projections",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"minItems": 1,
									"items": {
										"type": "string"
									}
								}
							}
						}
					},
					"default": {
						"description": "An error occured.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/exception"
								}
							},
							"text/html": {
								"schema": {
									"type": "string"
								}
							}
						}
					}
				}
			}
		},
		"/quantities": {
			"get": {
				"tags": [
					"Capabilities"
				],
				"summary": "describe all quantities in the system",
				"operationId": "getQuantities",
				"parameters": [
					{
						"name": "pageSize",
						"in": "query",
						"description": "Page size for the paging mechanism",
						"required": false,
						"style": "form",
						"explode": false,
						"schema": {
							"maximum": 10000,
							"minimum": 1,
							"type": "integer",
							"default": 10
						}
					},
					{
						"name": "page",
						"in": "query",
						"description": "Page number in the paging mechanism",
						"required": false,
						"style": "form",
						"explode": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"$ref": "#/components/parameters/boundingBox"
					},
					{
						"name": "time",
						"in": "query",
						"description": "Either a date-time or a period string that adheres to RFC 3339. Examples:\n* A date-time: \"2018-02-12T23:20:50Z\" * A period: \"2018-02-12T00:00:00Z/2018-03-18T12:31:12Z\" or \"2018-02-12T00:00:00Z/P1M6DT12H31M12S\"\nOnly coverages that have a temporal property that intersects the value of `time` are selected.\nIf a collection has multiple temporal properties, it is the decision of the server whether only a single temporal property is used to determine the extent or all relevant temporal properties.",
						"required": false,
						"style": "form",
						"explode": false,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Metadata about the quantities shared by this API.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/quantitylist"
								}
							}
						}
					},
					"default": {
						"description": "An error occured.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/exception"
								}
							},
							"text/html": {
								"schema": {
									"type": "string"
								}
							}
						}
					}
				}
			}
		}
	},
	"components": {
		"schemas": {
			"exception": {
				"type": "object",
				"properties": {
					"type": {
						"description": "Type of error.",
						"type": "string",
						"format": "uri"
					},
					"title": {
						"description": "Title of the error.",
						"example": "Error processing the request.",
						"type": "string"
					},
					"status": {
						"description": "The HTTP error code number (HTTP Status Code).",
						"example": 404,
						"type": "integer"
					},
					"detail": {
						"description": "Details of the error",
						"example": "Request resulted in a response that was too large.",
						"type": "string"
					},
					"instance": {
						"description": "Reference to the error for the provider.",
						"example": "https://myservice/meaningOrError400",
						"type": "string"
					},
					"errors": {
						"description": "Error details. More than one error can occur within the problem.",
						"type": "array",
						"items": {
							"description": "Defines the field of an error in the filtering syntax.",
							"type": "object",
							"properties": {
								"errorType": {
									"example": "Unknown comparer.",
									"type": "string"
								},
								"context": {
									"example": "Field 'locationCode'.",
									"type": "string"
								}
							},
							"required": [
								"errorType",
								"context"
							]
						}
					}
				}
			},
			"paginglinks": {
				"required": [
					"defaultPageSize"
				],
				"type": "object",
				"properties": {
					"self": {
						"type": "string",
						"description": "Hyperlink of the current page.",
						"nullable": true
					},
					"prev": {
						"type": "string",
						"description": "Hyperlink of the previous page.",
						"nullable": true
					},
					"next": {
						"type": "string",
						"description": "Hyperlink of the next page.",
						"nullable": true
					},
					"maxPageSize": {
						"type": "integer",
						"description": "Maximum page size.",
						"format": "int32",
						"nullable": true
					},
					"defaultPageSize": {
						"type": "integer",
						"description": "Default page size.",
						"format": "int32"
					},
					"minPageSize": {
						"type": "integer",
						"description": "Minimum page size.",
						"format": "int32"
					},
					"totalObjectCount": {
						"type": "integer",
						"description": "Count of all entities that satisfy the filter requirements. Will be left out when nocount=true is specified.",
						"format": "int32",
						"nullable": true
					}
				},
				"additionalProperties": false,
				"description": "Provides information for paging."
			},
			"coveragelist": {
				"required": [
					"provider",
					"paging",
					"result"
				],
				"type": "object",
				"properties": {
					"provider": {
						"allOf": [
							{
								"$ref": "#/components/schemas/providerblock"
							}
						],
						"description": "Information about the provider.",
						"nullable": true
					},
					"paging": {
						"allOf": [
							{
								"$ref": "#/components/schemas/paginglinks"
							}
						]
					},
					"result": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/coverage"
						},
						"description": "Query results."
					}
				},
				"additionalProperties": false,
				"description": "List of coverages that meet the query (i.e. the set of filter parameters)."
			},
			"coverage": {
				"required": [
					"provider"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "string"
					},
					"envelope": {
						"$ref": "https://github.com/DigitaleDeltaOrg/dd-grid-api/blob/master/voorstel/dd-grid-api-coverage-schema.json#definitions/envelope"
					},
					"domainSet": {
						"$ref": "https://github.com/DigitaleDeltaOrg/dd-grid-api/blob/master/voorstel/dd-grid-api-coverage-schema.json#definitions/domainSet"
					},
					"rangeSet": {
						"$ref": "https://github.com/DigitaleDeltaOrg/dd-grid-api/blob/master/voorstel/dd-grid-api-coverage-schema.json#definitions/rangeSet"
					},
					"rangeType": {
						"$ref": "https://github.com/DigitaleDeltaOrg/dd-grid-api/blob/master/voorstel/dd-grid-api-coverage-schema.json#definitions/rangeType"
					},
					"metadata": {
						"$ref": "https://github.com/DigitaleDeltaOrg/dd-grid-api/blob/master/voorstel/dd-grid-api-coverage-schema.json#definitions/metadata"
					}
				},
				"additionalProperties": false,
				"description": "Metadta."
			},
			"quantitylist": {
				"required": [
					"provider",
					"paging",
					"result"
				],
				"type": "object",
				"properties": {
					"provider": {
						"allOf": [
							{
								"$ref": "#/components/schemas/providerblock"
							}
						],
						"description": "Information about the provider.",
						"nullable": true
					},
					"paging": {
						"allOf": [
							{
								"$ref": "#/components/schemas/paginglinks"
							}
						]
					},
					"result": {
						"type": "array",
						"items": {
							"$ref": "https://github.com/DigitaleDeltaOrg/dd-grid-api/blob/master/voorstel/dd-grid-api-coverage-schema.json/rangeType"
						},
						"description": "Query results."
					}
				},
				"additionalProperties": false,
				"description": "List of quantities that meet the query (i.e. the set of filter parameters)."
			}
		},
		"parameters": {
			"pageSize": {
				"name": "pageSize",
				"in": "query",
				"description": "Page size for the paging mechanism",
				"required": false,
				"style": "form",
				"explode": false,
				"schema": {
					"maximum": 10000,
					"minimum": 1,
					"type": "integer",
					"default": 10
				}
			},
			"page": {
				"name": "page",
				"in": "query",
				"description": "Page number in the paging mechanism",
				"required": false,
				"style": "form",
				"explode": false,
				"schema": {
					"type": "string"
				}
			},
			"coverageId": {
				"name": "coverageId",
				"in": "path",
				"description": "Identifier (name) of a specific coverage",
				"required": true,
				"schema": {
					"type": "string"
				}
			},
			"boundingBox": {
				"name": "boundingBox",
				"in": "query",
				"description": "Only coverages that have a geometry that intersects the bounding box are selected. The bounding box is provided as four or six numbers, depending on whether the coordinate reference system includes a vertical axis (elevation or depth):\n* Lower left corner, coordinate axis 1 * Lower left corner, coordinate axis 2 * Lower left corner, coordinate axis 3 (optional) * Upper right corner, coordinate axis 1 * Upper right corner, coordinate axis 2 * Upper right corner, coordinate axis 3 (optional)\nThe coordinate reference system of the values is WGS84 longitude/latitude (http://www.opengis.net/def/crs/OGC/1.3/CRS84).\nFor WGS84 longitude/latitude the values are in most cases the sequence of minimum longitude, minimum latitude, maximum longitude and maximum latitude. However, in cases where the box spans the antimeridian the first value (west-most box edge) is larger than the third value (east-most box edge).\nIf a collection has multiple spatial geometry properties, it is the decision of the server whether only a single spatial geometry property is used to determine the extent or all relevant geometries.\n",
				"required": false,
				"style": "form",
				"explode": false,
				"schema": {
					"maxItems": 6,
					"minItems": 4,
					"type": "array",
					"items": {
						"type": "number"
					}
				}
			},
			"time": {
				"name": "time",
				"in": "query",
				"description": "Either a date-time or a period string that adheres to RFC 3339. Examples:\n* A date-time: \"2018-02-12T23:20:50Z\" * A period: \"2018-02-12T00:00:00Z/2018-03-18T12:31:12Z\" or \"2018-02-12T00:00:00Z/P1M6DT12H31M12S\"\nOnly coverages that have a temporal property that intersects the value of `time` are selected.\nIf a collection has multiple temporal properties, it is the decision of the server whether only a single temporal property is used to determine the extent or all relevant temporal properties.",
				"required": false,
				"style": "form",
				"explode": false,
				"schema": {
					"type": "string"
				}
			},
			"quantityIds": {
				"name": "quantityIds",
				"in": "query",
				"description": "Get a subset of the quantities in the coverage (quantity identifiers separated by ';')",
				"required": false,
				"style": "form",
				"explode": true,
				"schema": {
					"type": "string"
				}
			},
			"quantityNames": {
				"name": "quantityNames",
				"in": "query",
				"description": "Get a subset of the quantities in the coverage (quantity names separated by ';')",
				"required": false,
				"style": "form",
				"explode": true,
				"schema": {
					"type": "string"
				}
			},
			"outputCrs": {
				"name": "outputcrs",
				"in": "query",
				"description": "reproject the output coverage to the given",
				"required": false,
				"style": "form",
				"explode": true,
				"schema": {
					"type": "string"
				}
			}
		}
	}
}